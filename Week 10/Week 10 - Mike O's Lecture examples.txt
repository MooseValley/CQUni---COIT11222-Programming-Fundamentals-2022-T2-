******************************************************
COIT11222 Programming Fundamentals (2022-T2)
Week: 10
Course WEB Page (Moodle):         https://moodle.cqu.edu.au/course/view.php?id=37697
Course Coordinator:               Dr. Jacqueline Jarvis, Brisbane Campus, Contact: +61-07-3023-4238, Email: j.jarvis@cqu.edu.au
Rocky Teacher (Part-Time):        Mike O'Malley, m.omalley@cqu.edu.au
Mike O's GitHub for course/term:  https://github.com/MooseValley/Uni-COIT11222-Programming-Fundamentals-2022-T2
Mike O'Malley's Java Videos (incl JavaFX, etc):            http://tinyurl.com/MikesJavaVideos
Mike O'Malley's JavaFX + Netbeans + Scene Builder Videos:  http://tinyurl.com/MikesJavaFXVideos
******************************************************

ROAD MAP:
Week 01 Creating Java Programs; Using Data (Part 1)
Week 02 Using Data (Part 2); Methods
Week 03 Methods
Week 04 Classes and Objects
Week 05 Making decisions (Selection Statements)
Week 06 Looping
Week 07 Arrays
Week 08 Advanced Array Concepts
Week 09	Characters, Strings and the StringBuilder
Week 10	Exceptions    <--- YOU ARE HERE !
Week 11	Files Input and Output
Week 12	Design; Ethics; Review


LAST WEEK: Week 09
* Week 09	Characters, Strings and the StringBuilder

THIS WEEK: Week 10
* Week 10	Exceptions    <--- YOU ARE HERE !


*** Exception Handling

    try
    catch
    finally
    throw / throws

Allow you to handle errors without your program crashing.
You can handle errors gracefully : produce nice error messages, etc.


try
{
    // any code that might cause an Exception goes here
}
catch (....)
{
   // Deal with the exception
   // Display an error to the user, 
   // Set the return value for a method to -1 (or whatever) to indicate an error condition to the caller
   // In serious cases, you might even Exit the program.
}

Whatever you do:
* Do NOT fail silently
* The absolute minimum is printing an error to the Console window and printStackTrace()
* Ideal: you generate messages that will be seen by anyone who needs to know about the error
* e.g. for a User, use JOptionPane.showMessageDialog
* For far more serious errors, such as jobs running overnight - send email, SMS, etc



For example this type of code would be VERY BAD:

try
{
    // try and save user's data to file
}
catch (....)
{
   // Do nothing - user has no idea that a Save has failed !
}


A try can have multiple Catches if you want to handle each type of possible exception differently:

try
{
}
catch (ExceptionType1 ..)
{
}
catch (ExceptionType2 ..)
{
}
catch (ExceptionType3 ..)
{
}


Or, if you want to catch multiple exceptions and deal with them all the same way (in the same catch):

try
{
}
catch (ExceptionType1 | ExceptionType2 | ExceptionType3 err)
{
    System.out.println ("ERROR: .....");
    err.printStackTrace();
}



*** Throw

int age = -1;

try
{
  age = Integer.parseInt (ageStr);    

  if ((age < 1) || (age > 120) )
  {
     //System.out.println ("Error: age must be between 1 and 120");
     throw new NumberFormatException ();
  }
}
catch (NumberFormatException err)
{
   System.out.println ("Error: age must be between 1 and 120");
}


*** Finally

contains code that you to run no matter what.

try
{
    // try and save user's data to file
    // Open File
    // Write File
}
catch (....)
{
   // If we did nothing here, user has no idea that a Save has failed !  BAD !
}
finally
{
   // Close file.
   // This might also cause an Exception ... need another try catch ??
}




            *
           *
          *
**********

EOF.
